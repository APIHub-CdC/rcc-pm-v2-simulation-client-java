/*
 * Reporte de Crédito Consolidado Personas Morales
 * <p>PI Reporte de Crédito Consolidado de Personas Morales. <br/><br><img src='https://developer.circulodecredito.com.mx/sites/default/files/2024-01/Logo-Swaggers.png' height='70' width='270'/></p><br/>
 *
 * OpenAPI spec version: 1.0.0
 * Contact: api@circulodecredito.com.mx
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.RCCPM.client.api;

import io.RCCPM.client.ApiCallback;
import io.RCCPM.client.ApiClient;
import io.RCCPM.client.ApiException;
import io.RCCPM.client.ApiResponse;
import io.RCCPM.client.Configuration;
import io.RCCPM.client.Pair;
import io.RCCPM.client.ProgressRequestBody;
import io.RCCPM.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.RCCPM.client.model.RequestRCCV2;
import io.RCCPM.client.model.RespuestaRCCV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReporteDeCrditoConsolidadoDePersonasMoralesV2Api {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ReporteDeCrditoConsolidadoDePersonasMoralesV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ReporteDeCrditoConsolidadoDePersonasMoralesV2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for v2rccPm
     * @param body  (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call v2rccPmCall(RequestRCCV2 body, String xApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/sandbox/reporte-pm/v2/rcc-pm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xApiKey != null)
        localVarHeaderParams.put("x-api-key", apiClient.parameterToString(xApiKey));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                	okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private okhttp3.Call v2rccPmValidateBeforeCall(RequestRCCV2 body, String xApiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v2rccPm(Async)");
        }
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling v2rccPm(Async)");
        }
        
        okhttp3.Call call = v2rccPmCall(body, xApiKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @return RespuestaRCCV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RespuestaRCCV2 v2rccPm(RequestRCCV2 body, String xApiKey) throws ApiException {
        ApiResponse<RespuestaRCCV2> resp = v2rccPmWithHttpInfo(body, xApiKey);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @return ApiResponse&lt;RespuestaRCCV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RespuestaRCCV2> v2rccPmWithHttpInfo(RequestRCCV2 body, String xApiKey) throws ApiException {
    	okhttp3.Call call = v2rccPmValidateBeforeCall(body, xApiKey, null, null);
        Type localVarReturnType = new TypeToken<RespuestaRCCV2>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param xApiKey ConsumerKey obtenido desde el portal de desarrolladores (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call v2rccPmAsync(RequestRCCV2 body, String xApiKey, final ApiCallback<RespuestaRCCV2> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = v2rccPmValidateBeforeCall(body, xApiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RespuestaRCCV2>(){}.getType();
        apiClient.execute(call, localVarReturnType);
        return call;
    }
}
